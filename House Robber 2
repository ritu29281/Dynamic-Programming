You are a professional robber planning to rob houses along a street.
Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one.
Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.
Input: nums = [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.

CODE:

class Solution {
public:
    int solve(vector<int>&nums,int i,int n,vector<int>&dp){
        if(i>n){
            return 0;
        }
        if(dp[i]!=-1){
            return dp[i];
        }
        int take=nums[i]+solve(nums,i+2,n,dp);
        int not_take=solve(nums,i+1,n,dp);
        dp[i]= max(take,not_take);
        return dp[i];
    }
    int rob(vector<int>& nums) {
        int  n=nums.size();
        vector<int>dp(101,-1);
        if(n==1){
            return nums[0];
        }
        if(n==2){
            return max(nums[0],nums[1]);
        }
        int zeroth_index_take=solve(nums,0,n-2,dp);
       vector<int>dp2(101,-1);
        int zeroth_index_not_take=solve(nums,1,n-1,dp2);
        return max(zeroth_index_take,zeroth_index_not_take);
    }
};
